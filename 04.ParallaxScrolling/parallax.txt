Window Object
-브라우저의 윈도우 또는 탭에 관련된 정보를 담고 있는 전역 객체
window.document : document와 동일하게 사용됨
window.history : 브라우저의 세션 기록 조작시 사용
window.history.back() : 뒤로가기
.open() : 새창, 새탭 열기
.close() : 현재 창이나 탭을 닫기
.scrollX : 수평으로 얼마나 스크롤 됐는지 픽셀 단위 반환
.scrollY : 수직으로 얼마나 스크롤 됐는지 픽셀 단위 반환


HTMLElement.style
-해당 요소에 인라인 스타일로 정의된 속성들을 담고 있는 객체임
-js에서 css없이 스타일 조작하는 방법
-html 요소의 "인라인"으로 정의된 스타일에 접근,조작 가능함
->>즉, 별도의 css파일에서 정의된 스타일에는 접근하지 못한다!!


<css만으로 스크롤 속도 조절하기>
-3d 관련 속성을 이용해서 원근감을 줘서 속도 조절하기
-js를 사용하는 방법과 css만 사용하는 방법이 있음

css perspective
-해당 요소의 z = 0 평면과 사용자 사이의 거리를 정의함
-transform 효과를 주고자 하는 부모 요소에 적용
-perspective가 클수록 = 거리가 멀수록 변형 효과가 적음
-perspective가 작을수록 = 거리가 가까울수록 변형 효과가 큼


<비교>
1.js
-움직임 등에 대해 보다 직접적인 통제가 가능 = 구현 자유도가 높음
-사용자 인풋에 따르는 등 복잡한 인터랙션, 애니메이션도 구현 가능
-하고자하는 인터랙션 요소에 따라 웹 성능에 지장을 줄 수 있음
-유저 인풋 등과 관계된 인터랙티브가 필요한 경우에 적합함

2.css
-가볍고 효율적임
-직접 조작 가능한 인터랙티브 요소가 제한적임
-비교적 간단한 인터랙티브 요소 적용에 적합함



